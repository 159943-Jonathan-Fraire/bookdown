[
["index.html", "Authoring A Book with R Markdown Chapter 1 Introduction", " Authoring A Book with R Markdown Yihui Xie 2016-02-20   Chapter 1 Introduction   This book and the package bookdown are still under active development, and should not be considered stable at the moment. You are welcome to experiment with this package, and feedback may be sent to  '+e+''); // -->   yihui at rstudio dot com  .   This book is a guide to authoring books with R Markdown (Allaire et al. 2015) and the R package bookdown (Xie 2016a). It focuses on the features specific to writing books, long-form articles, or reports, such as  How to typeset figures and tables, and cross-reference them; How to generate multiple output formats such as HTML, PDF, and E-Books for a single book; How to customize the book templates and style different elements in a book; The editor support (in particular, the RStudio IDE); How to publish a book;  It is not a comprehensive introduction to R Markdown or the knitr package (Xie 2016b), on top of which bookdown was built. To learn more about R Markdown, please check out the online documentation http://rmarkdown.rstudio.com. For knitr, please see Xie (2015). You do not have to be an expert of the R language (R Core Team 2015) to read this book, but you are expected to have some basic knowledge about R Markdown and knitr. For beginners, you may get started with the cheatsheets at https://www.rstudio.com/resources/cheatsheets/. To be able to customize the book templates and themes, you should be familiar with LaTeX, HTML and CSS.  "],
["motivation.html", "1.1 Motivation", " 1.1 Motivation Markdown is a wonderful language to write relatively simple documents that contain elements like sections, paragraphs, lists, links, and images, etc. Pandoc (http://pandoc.org) has greatly extended the original Markdown syntax, and added quite a few useful new features, such as footnotes, citations, and tables. More importantly, Pandoc makes it possible to generate output documents of a large variety of formats from Markdown, including HTML, LaTeX/PDF, Word, and slides. To write a relatively complicated document like a book, there are still a few useful features missing in Pandoc’s Markdown at the moment, such as automatic numbering of figures and tables in the HTML output, cross-references of figures and tables, and fine control of the appearance of figures (e.g., currently it is impossible to specify the alignment of images using the Markdown syntax). These are some of the problems that we have addressed in the bookdown package. Under the constraint that we want to produce the book in multiple output formats, it is nearly impossible to cover all possible features specific to these output formats. For example, it may be difficult to reinvent a certain complicated LaTeX environment in the HTML output using the (R) Markdown syntax. Our main goal is not to replace everything with Markdown, but to cover most common functionalities required to write a relatively complicated document, and make the syntax of such functionalities consistent across all output formats. Another goal of this project is to make it easy to produce books that look visually pleasant. Some nice existing examples include Gitbook (https://www.gitbook.com), Tufte CSS (http://edwardtufte.github.io/tufte-css/), and Tufte-LaTeX (https://tufte-latex.github.io/tufte-latex/). We hope to integrate these themes and styles into bookdown, so authors do not have to dive into the details of how to use a certain LaTeX class or how to configure CSS for HTML output. "],
["get-started.html", "1.2 Get started", " 1.2 Get started The easiest way for beginners to get started with writing a book with R Markdown and bookdown is through the demo bookdown-demo on GitHub:  Fork or clone the GitHub repository https://github.com/rstudio/bookdown-demo if you are familiar with GIT and GitHub, or just download it as a Zip file then unzip it locally; Install the RStudio IDE (http://www.rstudio.com) if you have not done so; Open the bookdown-demo repository you cloned or downloaded in RStudio by clicking bookdown-demo.Rproj; Install the R package bookdown: devtools::install_github(&quot;rstudio/bookdown&quot;) Open the R Markdown index.Rmd and click the button Knit on the toolbar of RStudio;  Now you should see the index page of this book demo in the RStudio Viewer. You may add or change the R Markdown files, come back to index.Rmd, and hit the Knit button again to preview the book. If you prefer not to use RStudio, you may also compile the book through command line. See the next section for details. "],
["usage.html", "1.3 Usage", " 1.3 Usage Normally, a book contains multiple chapters, and one chapter lives in one R Markdown file, with the filename extension .Rmd. Each R Markdown file must start immediately with the chapter title. Here is an example (the bullets are the filenames, followed by the file content):  01-intro.Rmd # Introduction  This chapter is an overview of the methods that we propose to solve an **important problem**. 02-literature.Rmd # Literature  Here is a review of existing methods. 03-method.Rmd # Methods  We describe our methods in this chapter. 04-application.Rmd # Applications  Some _significant_ applications are demonstrated in this chapter.  ## Example one  ## Example two 05-summary.Rmd # Final Words  We have finished a nice book.  By default, bookdown merges all Rmd files by the order of filenames, e.g., 01-intro.Rmd will appear before 02-literature.Rmd. Filenames that start with an underscore _ are skipped. If there exists an Rmd file named index.Rmd, it will always be treated as the first file when merging all Rmd files. The reason for this special treatment is that the HTML file index.html to be generated from index.Rmd is usually the default index file when you view a website, e.g., you are actually browsing http://yihui.name/index.html when you open http://yihui.name/. You can override the above behavior by including a configuration file named _bookdown.yml in the book directory. It is a YAML file (https://en.wikipedia.org/wiki/YAML), and R Markdown users should be familiar with this format since it is also used to write the metadata in the beginning of R Markdown documents. You can use a field named rmd_files to define your own list and order of Rmd files for the book. For example, rmd_files: [&quot;index.Rmd&quot;, &quot;abstract.Rmd&quot;, &quot;intro.Rmd&quot;] In this case, bookdown will just use whatever you defined in this YAML field without any special treatments of index.Rmd or underscores. If you want both HTML and LaTeX/PDF output from the book, and use different Rmd files for HTML and LaTeX output, you may specify these files for the two output formats separately, e.g., rmd_files:   html: [&quot;index.Rmd&quot;, &quot;abstract.Rmd&quot;, &quot;intro.Rmd&quot;]   latex: [&quot;abstract.Rmd&quot;, &quot;intro.Rmd&quot;]   Because knitr does not allow duplicate chunk labels in a source document, you need to make sure there are no duplicate labels in your book chapters, otherwise knitr will signal an error when knitting the merged Rmd file.   At the moment, there are two output formats that you may use: bookdown::pdf_book and bookdown::html_chapters. There is a bookdown::render_book() function similar to rmarkdown::render() that renders multiple Rmd documents into a book using the output format functions. You may either call this function from command line, or use it in the RStudio IDE. Here are some command line examples: bookdown::render_book(&quot;foo.Rmd&quot;, &quot;bookdown::html_chapters&quot;) bookdown::render_book(&quot;foo.Rmd&quot;, &quot;bookdown::pdf_book&quot;) bookdown::render_book(&quot;foo.Rmd&quot;, bookdown::html_chapters(lib_dir = &quot;book_assets&quot;)) bookdown::render_book(&quot;foo.Rmd&quot;, bookdown::pdf_book(keep_tex = TRUE)) To use render_book and the output format functions in the RStudio IDE, you can define a YAML field named knit that takes the value bookdown::render_book, and the output format functions can be used in the output field, e.g., --- knit: &quot;bookdown::render_book&quot; output:   bookdown::html_chapters:     lib_dir: &quot;book_assets&quot;   bookdown::pdf_book:     keep_tex: yes --- Then you can click the Knit button in RStudio to compile the Rmd files into a book. There are more things you can configure for a book in _bookdown.yml:  book_filename: the filename of the main Rmd file, i.e., the Rmd file that is merged from all chapters; by default, it is named _main.Rmd chapter_name: (for HTML output only) either a character string to be prepended to the chapter number in the chapter title (by default it is &quot;Chapter &quot;), or an R function that takes the chapter number as the input and returns a string as the new chapter number (e.g., !expr function(i) paste('Chapter', i)) before_chapter_script: one or multiple R scripts to be executed before each chapter, e.g., you may want to clear the workspace before compiling each chapter, in which case you can use rm(list = ls(all = TRUE)) in the R script after_chapter_script: similar to before_chapter_script, and the R script is executed after each chapter  Here is a sample _bookdown.yml: book_filename: &quot;my-book.Rmd&quot; chapter_name: &quot;CHAPTER &quot; before_chapter_script: [&quot;script1.R&quot;, &quot;script2.R&quot;] after_chapter_script: &quot;script3.R&quot; "],
["separate-r-sessions-for-individual-chapters.html", "1.4 Separate R sessions for individual chapters", " 1.4 Separate R sessions for individual chapters Merging all chapters into one Rmd file and knitting it is one way to render the book in bookdown. There is actually another way: you may knit each chapter in a separate R session, and bookdown will merge the Markdown output of all chapters to render the book. We call these two approaches “Merge and Knit” (MK) and “Knit and Merge” (KM), respectively. The differences between them may seem subtle, but can be fairly important depending on your use cases.  The most significant difference is that MK runs all code chunks in all chapters in the same R session, whereas KM uses separate R sessions for individual chapters. For MK, the state of the R session from previous chapters is carried over to later chapters (e.g., objects created in previous chapters are available to later chapters, unless you deliberately deleted them); for KM, all chapters are isolated from each other1. If you want each chapter to compile from a clean state, use the KM approach. It can be very tricky and difficult to restore a running R session to a completely clean state if you use the MK approach. For example, even you detach/unload packages loaded in a previous chapter, R will not clean up the S3 methods registered by these packages. One advantage of KM is that Rmd files that have not been updated since the last time the book was rendered will not be recompiled by default, unless you force all chapters to be recompiled via render_book(force_knit = TRUE). This may save some time, but the speedup may not be very significant, since the major time is normally consumed by running code chunks. If time-consumed chunks are cached, the compilation time for MK and KM may be about the same. The KM approach will generate more files under the directory of Rmd files: each Rmd file will generate a Markdown output file (.md), and possibly a figure directory and a cache directory. The MK approach only renders one Rmd file, so it only has one set of output files. For KM, whenever you change the output format (e.g., from HTML to PDF), you must recompile all chapters (render_book(force_knit = TRUE)), because the Markdown output files for one format may not work for another format. There is no such issue with the MK approach.  The default approach in bookdown is MK. To switch to KM, you either use the argument new_session = TRUE when calling render_book(), or set new_session: yes in the configuration file _bookdown.yml. Note the configurations before_chapter_script and after_chapter_script are ignored by KM. You can still configure book_filename, but it should be a Markdown filename, e.g., _main.md. All other configurations work for both MK and KM. "],
["some-tips.html", "1.5 Some tips", " 1.5 Some tips Typesetting under the paging constraint (e.g., for LaTeX/PDF output) can be an extremely tedious and time-consuming job. I’d recommend you not to look at your PDF output frequently, since most of the time you are very unlikely to be satisfied: text may overflow into the page margin, figures may float too far away, and so on. Do not try to make things look right immediately, because you may be disappointed over and over again as you keep on revising the book, and things may be messed up again even if you only did some minor changes (see http://bit.ly/tbrLtx for a nice illustration). If you want to preview the book, preview the HTML output. Work on the PDF book after you have finished the content of the book, and are very sure no major revisions will be required. If certain code chunks in your R Markdown docuemnts are time-consuming to run, you may cache them by adding the chunk option cache = TRUE in the chunk header, and you are recommended to label such code chunks as well, e.g., ```{r important-computing, cache=TRUE}    -->"],
["components.html", "Chapter 2 Components  ", " Chapter 2 Components  "],
["markdown-syntax.html", "2.1 Markdown syntax", " 2.1 Markdown syntax We give a very brief introduction to Pandoc’s Markdown in this section. Readers who are familiar with Markdown can skip this section. The comphrehensive syntax of Pandoc’s Markdown can be found on the Pandoc website http://pandoc.org. You can make text italic by surrounding it with underscores or asterisks, e.g., _text_ or *text*. For bold text, use two underscores (__text__) or asterisks (**text**). Text surrounded by ~ will be converted to a subscript (e.g., H~2~SO~4~ renders H2SO4), and similarly, two carets like ^ produces a superscript (e.g., ClO^-^ renders ClO-). To mark text as inline code, use a pair of backticks, e.g., `code`2. Small caps can be produced by the HTML tag span, e.g., &lt;span style=&quot;font-variant:small-caps;&quot;&gt;Small caps&lt;/span&gt; renders Small caps. Links are created using [text](link), e.g., [RStudio](http://www.rstudio.com), and the syntax for images is similar: just add an exclamation mark, e.g., ![alt text or image title](path/to/image). Footnotes are put inside the square brackets after a caret ^[], e.g., ^[This is a footnote.]. We will talk about citations in Section 2.7. Section headers can be written after a number of pound signs, e.g., # First-level header  ## Second-level header  ### Third-level header Unordered list items start with *, -, or +, and you can nest one list within another list by indenting the sub-list by four spaces, e.g., - one item - one item - one item     - one item     - one item The output is:  one item one item one item  one item one item   Ordered list items start with numbers (the rule for nested lists is the same as above), e.g., 1. the first item 2. the second item 3. the third item The output does not look too much different with the Markdown source:  the first item the second item the third item  Blockquotes are written after &gt;, e.g., &gt; &quot;I thoroughly disapprove of duels. If a man should challenge me,   I would take him kindly and forgivingly by the hand and lead him   to a quiet place and kill him.&quot; &gt; &gt; --- Mark Twain The actual output:  “I thoroughly disapprove of duels. If a man should challenge me, I would take him kindly and forgivingly by the hand and lead him to a quiet place and kill him.” — Mark Twain  Plain code blocks can be written after three or more backticks, and you can also indent the blocks by four spaces, e.g., ``` This text is displayed verbatim / preformatted ```  Or indent by four spaces:      This text is displayed verbatim / preformatted Inline LaTeX equations can be written in a pair of dollar signs using the LaTeX syntax, e.g., $f(k) = {n \\choose k} p^{k} (1-p)^{n-k}$ (actual output: \\(f(k)={n \\choose k}p^{k}(1-p)^{n-k}\\)); math expressions of the display style can be written in a pair of double dollar signs, e.g., $$f(k) = {n \\choose k} p^{k} (1-p)^{n-k}$$, and the output looks like this: \\[f(k)={n \\choose k}p^{k}(1-p)^{n-k}\\] "],
["r-code.html", "2.2 R code", " 2.2 R code There are two types of R code in R Markdown/knitr documents: R code chunks, and inline R code. The syntax for the latter is `r R_CODE`, and it can be embedded inline with other document elements. R code chunks look like plain code blocks, but has {r} after the three backticks and (optionally) chunk options inside {}, e.g., ```{r chunk-label, echo = FALSE, fig.cap = &#39;A figure caption.&#39;} 1 + 1 rnorm(10)  # 10 random numbers plot(dist ~ speed, cars)  # a scatterplot ``` To learn more about knitr chunk options, see Xie (2015) or http://yihui.name/knitr/options. "],
["figures.html", "2.3 Figures", " 2.3 Figures By default, figures have no captions in the output generated by knitr, which means they will just be placed wherever they were generated in the R code. Below is such an example. par(mar = c(4, 4, 0.1, 0.1)) plot(pressure, pch = 19, type = &quot;b&quot;)  The disadvantage of typesetting figures in this way is that when there is not enough space on the current page to place a figure, it may either reach the bottom of the page (hence exceeds the page margin), or be pushed to the next page, leaving a large white margin at the bottom of the current page. That is basically why there are “floating environments” in LaTeX: elements that cannot be split over multiple pages (like figures) are put in floating environments, so they can float to a page that has enough space to hold them. There is also a disadvantage of floating things forward or backward, though. That is, readers may have to jump to a different page to find the figure mentioned on the current page. This is simply a natural consequence of having to typeset things on multiple pages of fixed sizes. This issue does not exist in HTML, however, since everything can be placed continuously on one single page (presumably with infinite height), and there is no need to split anything across multiple pages of the same page size. If we assign a figure caption to a code chunk via the chunk option fig.cap, R plots will be put into figure environments, which will be automatically labeled and numbered, and can also be cross-referenced. The label of a figure environment is generated from the label of the code chunk, e.g., if the chunk label is foo, the figure label will be fig:foo (the prefix fig: is added before foo). To reference a figure, use the syntax \\@ref(label)3, where label is the figure label, e.g., fig:foo.   If you want to cross-reference figures or tables generated from a code chunk, please make sure the chunk label only contains alphanumeric characters (a-z, A-Z, 0-9) and dashes (-). Other characters do not qualify.   The chunk option fig.asp can be used to set the aspect ratio of plots, i.e., the ratio of figure height/width. If the figure width is 6 inches (fig.width = 6) and fig.asp = 0.7, the figure height will be automatically calculated from fig.width * fig.asp = 6 * 0.7 = 4.2. Figure 2.1 is an example using the chunk options fig.asp = 0.7, fig.width = 6, and fig.align = 'center', generated from the code below: par(mar = c(4, 4, 0.1, 0.1)) plot(pressure, pch = 19, type = &quot;b&quot;)    Figure 2.1: A figure example with the specified aspect ratio, width, and alignment.   The actual size of a plot is determined by the chunk options fig.width and fig.height (the size of the plot generated from a graphical device), and we can specify the output size of plots via the chunk options out.width and out.height. The possible value of these two options depends on the output format of the document. For example, out.width = '30%' is a valid value for HTML output, but not for LaTeX/PDF output. However, knitr will automatically convert a percentage value for out.width of the form x% to (x / 100) \\linewidth, e.g., out.width = '70%' will be treated as .7\\linewidth when the output format is LaTeX. This makes it possible to specify a relative width of a plot in a consistent manner. Figure 2.2 is an example of out.width = 70%. par(mar = c(4, 4, 0.1, 0.1)) plot(cars, pch = 19)    Figure 2.2: A figure example with a relative width 70%.   If you want to put multiple plots in one figure environment, you must use the chunk option fig.show = 'hold' to hold multiple plots from a code chunk and include them in one environment. You can also place plots side by side if the sum of the width of all plots is smaller than or equal to the current line width. For example, if two plots have the same width 50%, they will be placed side by side. Similarly, you can specify out.width = '33%' to arrange three plots on one line. Figure 2.3 is an example of two plots, each with a width 50%. par(mar = c(4, 4, 0.1, 0.1)) plot(pressure, pch = 19, type = &quot;b&quot;) plot(cars, pch = 19)    Figure 2.3: Two plots placed side by side.   Sometimes you may have certain images that are not generated from R code, and you can include them them in R Markdown via the function knitr::include_graphics(). Figure 2.4 is an example of three knitr logos included in a figure environment. You may pass one or multiple image paths to the include_graphics() function, and all chunk options that apply to normal R plots also apply to these images, e.g., you can use out.width = '33%' to set the widths of these images in the output document. knitr::include_graphics(rep(&quot;images/knit-logo.png&quot;, 3))    Figure 2.4: Three knitr logos included in the document from an external PNG image file.   There are a few advantages of using include_graphics():  You do not need to worry about the document output format, e.g., when the output format is LaTeX, you may have to use the LaTeX command \\includegraphics{} to include an image, and when the output format is Markdown, you have to use ![](). The function include_graphics() in knitr takes care of these details automatically. The syntax for controlling the image attributes is the same as when images are generated from R code, e.g., chunk options fig.cap, out.width, and fig.show still have the same meanings. include_graphics() is smart enough to use PDF graphics automatically when the output format is LaTeX and the PDF graphics files exist, e.g., an image path foo/bar.png can be automatically replaced with foo/bar.pdf if the latter exists. PDF images often have better qualities than raster images in LaTeX/PDF output. Of course, you can disable this feature by include_graphics(auto_pdf = FALSE) if you do not like it.  "],
["tables.html", "2.4 Tables", " 2.4 Tables For now, the most convenient way to generate a table is the function knitr::kable(), because there are some internal tricks in knitr to make it work with bookdown and users do not have to know anything about these implementation details. We will explain how to use other packages and functions later in this section. Like figures, tables with captions will also be numbered and can be referenced. The kable() function will automatically generate a label for a table environment, which is the prefix tab: plus the chunk label. For example, the table label for a code chunk with the label foo will be tab:foo, and we can still use the syntax \\@ref(label) to reference the table. Table 2.1 is a simple example. knitr::kable(   head(mtcars, 10), booktabs = TRUE,   caption = &#39;A table of the first 10 rows of the mtcars data.&#39; )  Table 2.1: A table of the first 10 rows of the mtcars data.    mpg cyl disp hp drat wt qsec vs am gear carb     Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4   Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4   Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1   Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1   Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2   Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1   Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4   Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2   Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2   Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4    If you want to put multiple tables in a single table environment, just wrap the data objects (usually data frames in R) into a list. See Table 2.2 for an example. knitr::kable(   list(     head(iris[,1:2],3),     head(mtcars[,1:3],5)   ),   caption = &#39;A Tale of Two Tables.&#39;, booktabs = TRUE )   Table 2.2: A Tale of Two Tables.        Sepal.Length Sepal.Width     5.1 3.5   4.9 3.0   4.7 3.2          mpg cyl disp     Mazda RX4 21.0 6 160   Mazda RX4 Wag 21.0 6 160   Datsun 710 22.8 4 108   Hornet 4 Drive 21.4 6 258   Hornet Sportabout 18.7 8 360        When you do not want a table to float in PDF, you may use the LaTeX package longtable, which can break a table across multiple pages. To use longtable, just pass longtable = TRUE to kable(), and make sure to include \\usepackage{longtable} in the LaTeX preamble (see Section 4.1 for how to customize the LaTeX preamble). Of course, this is irrelevant to HTML output, since tables in HTML do not need to float. knitr::kable(   iris[1:100, ], longtable = TRUE, booktabs = TRUE,   caption = &#39;A table generated by the longtable package.&#39; )  Table 2.3: A table generated by the longtable package.   Sepal.Length Sepal.Width Petal.Length Petal.Width Species     5.1 3.5 1.4 0.2 setosa   4.9 3.0 1.4 0.2 setosa   4.7 3.2 1.3 0.2 setosa   4.6 3.1 1.5 0.2 setosa   5.0 3.6 1.4 0.2 setosa   5.4 3.9 1.7 0.4 setosa   4.6 3.4 1.4 0.3 setosa   5.0 3.4 1.5 0.2 setosa   4.4 2.9 1.4 0.2 setosa   4.9 3.1 1.5 0.1 setosa   5.4 3.7 1.5 0.2 setosa   4.8 3.4 1.6 0.2 setosa   4.8 3.0 1.4 0.1 setosa   4.3 3.0 1.1 0.1 setosa   5.8 4.0 1.2 0.2 setosa   5.7 4.4 1.5 0.4 setosa   5.4 3.9 1.3 0.4 setosa   5.1 3.5 1.4 0.3 setosa   5.7 3.8 1.7 0.3 setosa   5.1 3.8 1.5 0.3 setosa   5.4 3.4 1.7 0.2 setosa   5.1 3.7 1.5 0.4 setosa   4.6 3.6 1.0 0.2 setosa   5.1 3.3 1.7 0.5 setosa   4.8 3.4 1.9 0.2 setosa   5.0 3.0 1.6 0.2 setosa   5.0 3.4 1.6 0.4 setosa   5.2 3.5 1.5 0.2 setosa   5.2 3.4 1.4 0.2 setosa   4.7 3.2 1.6 0.2 setosa   4.8 3.1 1.6 0.2 setosa   5.4 3.4 1.5 0.4 setosa   5.2 4.1 1.5 0.1 setosa   5.5 4.2 1.4 0.2 setosa   4.9 3.1 1.5 0.2 setosa   5.0 3.2 1.2 0.2 setosa   5.5 3.5 1.3 0.2 setosa   4.9 3.6 1.4 0.1 setosa   4.4 3.0 1.3 0.2 setosa   5.1 3.4 1.5 0.2 setosa   5.0 3.5 1.3 0.3 setosa   4.5 2.3 1.3 0.3 setosa   4.4 3.2 1.3 0.2 setosa   5.0 3.5 1.6 0.6 setosa   5.1 3.8 1.9 0.4 setosa   4.8 3.0 1.4 0.3 setosa   5.1 3.8 1.6 0.2 setosa   4.6 3.2 1.4 0.2 setosa   5.3 3.7 1.5 0.2 setosa   5.0 3.3 1.4 0.2 setosa   7.0 3.2 4.7 1.4 versicolor   6.4 3.2 4.5 1.5 versicolor   6.9 3.1 4.9 1.5 versicolor   5.5 2.3 4.0 1.3 versicolor   6.5 2.8 4.6 1.5 versicolor   5.7 2.8 4.5 1.3 versicolor   6.3 3.3 4.7 1.6 versicolor   4.9 2.4 3.3 1.0 versicolor   6.6 2.9 4.6 1.3 versicolor   5.2 2.7 3.9 1.4 versicolor   5.0 2.0 3.5 1.0 versicolor   5.9 3.0 4.2 1.5 versicolor   6.0 2.2 4.0 1.0 versicolor   6.1 2.9 4.7 1.4 versicolor   5.6 2.9 3.6 1.3 versicolor   6.7 3.1 4.4 1.4 versicolor   5.6 3.0 4.5 1.5 versicolor   5.8 2.7 4.1 1.0 versicolor   6.2 2.2 4.5 1.5 versicolor   5.6 2.5 3.9 1.1 versicolor   5.9 3.2 4.8 1.8 versicolor   6.1 2.8 4.0 1.3 versicolor   6.3 2.5 4.9 1.5 versicolor   6.1 2.8 4.7 1.2 versicolor   6.4 2.9 4.3 1.3 versicolor   6.6 3.0 4.4 1.4 versicolor   6.8 2.8 4.8 1.4 versicolor   6.7 3.0 5.0 1.7 versicolor   6.0 2.9 4.5 1.5 versicolor   5.7 2.6 3.5 1.0 versicolor   5.5 2.4 3.8 1.1 versicolor   5.5 2.4 3.7 1.0 versicolor   5.8 2.7 3.9 1.2 versicolor   6.0 2.7 5.1 1.6 versicolor   5.4 3.0 4.5 1.5 versicolor   6.0 3.4 4.5 1.6 versicolor   6.7 3.1 4.7 1.5 versicolor   6.3 2.3 4.4 1.3 versicolor   5.6 3.0 4.1 1.3 versicolor   5.5 2.5 4.0 1.3 versicolor   5.5 2.6 4.4 1.2 versicolor   6.1 3.0 4.6 1.4 versicolor   5.8 2.6 4.0 1.2 versicolor   5.0 2.3 3.3 1.0 versicolor   5.6 2.7 4.2 1.3 versicolor   5.7 3.0 4.2 1.2 versicolor   5.7 2.9 4.2 1.3 versicolor   6.2 2.9 4.3 1.3 versicolor   5.1 2.5 3.0 1.1 versicolor   5.7 2.8 4.1 1.3 versicolor    If you decide to use other packages to generate tables, you have to make sure the label for the table environment appears in the beginning of the table caption in the form (\\#label), where label must have the prefix tab:. You have to be very careful about the portability of the table generating function: it should work for both HTML and LaTeX output automatically, so it must consider the output format internally (check knitr::opts_knit$get('pandoc.to')). When writing out an HTML table, the caption must be written in the &lt;caption&gt;&lt;/caption&gt; tag. For simple tables, kable() should suffice. If you have to create complicated tables (e.g., with certain cells spanning across multiple columns/rows), you will have to take the aforementioned issues into consideration. "],
["cross-references.html", "2.5 Cross-references", " 2.5 Cross-references We have explained how cross-references work for figures (Section 2.3) and tables (Section 2.4). In fact, you can also reference sections using the same syntax \\@ref(label), where label is the section ID. By default, Pandoc will generate an ID for all section headers, e.g., a section # Hello World will have an ID hello-world. We recommend you to manually assign an ID to a section header to make sure you do not forget to update the reference label after you change the section header. To assign an ID to a section header, simply add {#id} to the end of the section header. When a referenced label cannot be found, you will see two question marks like ??, as well as a warning message in the R console when rendering the book. "],
["custom-blocks.html", "2.6 Custom blocks", " 2.6 Custom blocks You can generate custom blocks using the block engine in knitr, i.e., the chunk option engine = 'block', or the more compact syntax ```{block}. This engine should be used in conjunction with the chunk option type, which takes a character string. When the block engine is used, it generates a &lt;div&gt; to wrap the chunk content if the output format is HTML, and a LaTeX environment if the output is LaTeX. The type option specifies the class of the &lt;div&gt; and the name of the LaTeX environment. For example, the HTML output of this chunk ```{block, type=&#39;FOO&#39;} Some text for this block. ``` will be this: &lt;div class=&quot;FOO&quot;&gt; Some text for this block. &lt;/div&gt; and the LaTeX output will be this: \\begin{FOO} Some text for this block. \\end{FOO} It is up to the book author how to define the style of the block. You can define the style of the &lt;div&gt; in CSS and include it in the output via the includes option in the YAML metadata. Similarly, you may define the LaTeX environment via \\newenvironment and include the definition in the LaTeX output via the includes option. For example, we may save the following style in a CSS file, say, style.css: div.FOO {   font-weight: bold;   color: red; } And the YAML metadata of the R Markdown document can be: --- output:   bookdown::html_chapters:     includes:       in_header: style.css --- We have defined a few types of blocks for this book to show notes, tips, and warnings, etc. Below are some examples:   R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under the terms of the GNU General Public License versions 2 or 3. For more information about these matters see http://www.gnu.org/licenses/.     R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under the terms of the GNU General Public License versions 2 or 3. For more information about these matters see http://www.gnu.org/licenses/.     R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under the terms of the GNU General Public License versions 2 or 3. For more information about these matters see http://www.gnu.org/licenses/.     R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under the terms of the GNU General Public License versions 2 or 3. For more information about these matters see http://www.gnu.org/licenses/.     R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under the terms of the GNU General Public License versions 2 or 3. For more information about these matters see http://www.gnu.org/licenses/.   "],
["citations.html", "2.7 Citations", " 2.7 Citations Although Pandoc supports multiple ways of writing citations, we recommend you to use BibTeX databases because they work best with LaTeX/PDF output. Pandoc can process other types of bibliography databases with the utility pandoc-citeproc (https://github.com/jgm/pandoc-citeproc), but it may not render certain bibliography items correctly (especially in case of multiple authors). With BibTeX databases, you will be able to define the bibiliography style if it is required by a certain publisher or journal. A BibTeX database is a plain-text file (with the conventional filename extension .bib) that consists of bibliography entries like this: @Manual{R-base,   title = {R: A Language and Environment for Statistical Computing},   author = {{R Core Team}},   organization = {R Foundation for Statistical Computing},   address = {Vienna, Austria},   year = {2015},   url = {https://www.R-project.org/}, } A bibliography entry starts with @type{, where type may be article, book, manual, and so on. Then there is a citation key, like R-base in the above example. To cite an entry, use @key or [@key] (the latter puts the citation in braces), e.g., @R-base is rendered to R Core Team (2015), and [@R-base] generates “(R Core Team 2015)”. If you are familiar with the natbib package in LaTeX, @key is basically \\citet{key}, and [@key] is equivalent to \\citep{key}. There are a number of fields in a bibliography entry, such as title, author, and year, etc. You may see https://en.wikipedia.org/wiki/BibTeX for possible types of entries and fields in BibTeX. There is a helper function write_bib() in knitr to generate BibTeX entries automatically for R packages. Note it only generates one BibTeX entry for the package itself at the moment, whereas a package may contain multiple entries in the CITATION file, and some entries are about the publications related to the package. These entries are ignored by write_bib(). # the second argument can be a .bib file knitr::write_bib(c(&quot;knitr&quot;, &quot;stringr&quot;), &quot;&quot;) @Manual{R-knitr,   title = {knitr: A General-Purpose Package for Dynamic Report Generation in R},   author = {Yihui Xie},   year = {2016},   note = {R package version 1.12.11},   url = {http://yihui.name/knitr/}, } @Manual{R-stringr,   title = {stringr: Simple, Consistent Wrappers for Common String Operations},   author = {Hadley Wickham},   year = {2015},   note = {R package version 1.0.0},   url = {https://CRAN.R-project.org/package=stringr}, } Once you have got one or multiple .bib files, you may use the field bibliography in the YAML metadata of your R Markdown document, and you can also specify the bibliopgraphy style via biblio-style (this only applies to PDF output), e.g., --- bibliography: [&quot;one.bib&quot;, &quot;another.bib&quot;, &quot;yet-another.bib&quot;] biblio-style: &quot;apalike&quot; link-citations: true --- The field link-citations can be used to add internal links from the citation text of the author-year style to the bibilography entry in the HTML output. "],
["interactive-shiny-apps.html", "2.8 Interactive Shiny apps", " 2.8 Interactive Shiny apps    -->"],
["output-formats.html", "Chapter 3 Output Formats  ", " Chapter 3 Output Formats  "],
["html.html", "3.1 HTML", " 3.1 HTML multi-page HTML "],
["latex.html", "3.2 LaTeX", " 3.2 LaTeX "],
["e-books.html", "3.3 E-Books", " 3.3 E-Books ePub, MOBI    -->"],
["customization.html", "Chapter 4 Customization  ", " Chapter 4 Customization  "],
["yaml-options.html", "4.1 YAML options", " 4.1 YAML options includes "],
["theming.html", "4.2 Theming", " 4.2 Theming "],
["templates.html", "4.3 Templates", " 4.3 Templates "],
["cjk-languages.html", "4.4 CJK languages", " 4.4 CJK languages    -->"],
["editors.html", "Chapter 5 Editors  ", " Chapter 5 Editors  "],
["rstudio.html", "5.1 RStudio", " 5.1 RStudio    -->"],
["publishing.html", "Chapter 6 Publishing  ", " Chapter 6 Publishing  "],
["github.html", "6.1 GitHub", " 6.1 GitHub A sketch of steps to publish to GitHub automatically:  Create a personal access token: https://help.github.com/articles/creating-an-access-token-for-command-line-use/ Encrypt it in the environment variable GH_TOKEN via command line travis encrypt and store it in .travis.yml, or simply save this environment variable via https://travis-ci.org/user/repo/settings where user is your GitHub ID, and repo is the name of the repository; Create a gh-pages branch in your repo, and push the branch to the remote repository, e.g., git checkout --orphan gh-pages git rm -rf . touch .nojekyll git add .nojekyll git commit -m&quot;Initial commit&quot; git push origin gh-pages You can clone this gh-pages branch on Travis using your GitHub token, add the HTML output files from R Markdown (do not forget to add figures and CSS style files as well), and push to the remote repository, e.g., git clone -b gh-pages https://${GH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git gh-pages cd gh-pages # cp ../*.html .... ./ # git add * # git commit -m&quot;....&quot; # git push origin gh-pages  If you use the container-based infrastructure on Travis, you can enable caching by using sudo: false in .travis.yml. Normally you should cache at least two directories: the figure directory _main_files and the cache directory _main_cache. If you have specified a different filename of the main Rmd file (Section 1.3), replace _main with the base name of the filename you specified. These directory names may also be different if you have specified the knitr chunk options fig.path and cache.path, but I’d strongly recommend you not to change these options. A .travis.yml file that has enabled caching of knitr figure and cache directories may look like this: sudo: false  cache:   directories:   - $PWD/_main_files   - $PWD/_main_cache "],
["publishers.html", "6.2 Publishers", " 6.2 Publishers "],
["licensing.html", "6.3 Licensing", " 6.3 Licensing "],
["self-publishing.html", "6.4 Self-publishing", " 6.4 Self-publishing    -->"],
["references.html", "References", " References    Allaire, JJ, Joe Cheng, Yihui Xie, Jonathan McPherson, Winston Chang, Jeff Allen, Hadley Wickham, Aron Atkins, and Rob Hyndman. 2015. Rmarkdown: Dynamic Documents for R. http://rmarkdown.rstudio.com.   R Core Team. 2015. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.   Xie, Yihui. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.name/knitr/.   ———. 2016a. Bookdown: Authoring Books with R Markdown. https://github.com/rstudio/bookdown.   ———. 2016b. Knitr: A General-Purpose Package for Dynamic Report Generation in R. http://yihui.name/knitr/.       Of course, no one can stop you from writing out some files in one chapter, and reading them in another chapter.↩ To include literal backticks, just use more backticks outside, e.g., you can use two backticks to preserve one backtick inside: `` `code` ``.↩ Do not forget the leading backslash!↩  "]
]
